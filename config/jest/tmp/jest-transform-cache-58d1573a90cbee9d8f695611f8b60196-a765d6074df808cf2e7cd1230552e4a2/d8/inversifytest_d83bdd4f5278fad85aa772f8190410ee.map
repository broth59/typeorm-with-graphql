{"version":3,"sources":["/home/broth59/Desktop/Projects/Node/Inversify/test/server/inversify.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAIA,IAAM,MAAN;AAAA,oBAAA;AAAA;;AACC,SAAA,QAAA,GAAW,QAAX;AAKA;;AAND;AAAA;AAAA,0BAGc;AACN,aAAO,MAAP;AACH;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,GAAA;;AAAM,MAAM,GAAA,UAAA,CAAA,CADX,WAAA,CAAA,UAAA,EACW,CAAA,EAAN,MAAM,CAAN;;AASN,IAAM,KAAN;AAEI,iBAAmB,MAAnB,EAAiC;AAAA;;AAC7B,SAAK,MAAL,GAAc,MAAd;AACH;;AAJL;AAAA;AAAA,4BAKgB;AAAK,aAAO,KAAK,MAAL,CAAY,GAAZ,EAAP;AAA2B;AALhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,GAAA;;AAAM,KAAK,GAAA,UAAA,CAAA,CADV,WAAA,CAAA,UAAA,EACU,E,iCAEoB,M,EAFpB,CAAA,EAAL,KAAK,CAAL;AASN,IAAI,SAAS,GAAG,IAAI,WAAA,CAAA,SAAJ,EAAhB;AAEA,SAAS,CAAC,YAAI;AACb,EAAA,SAAS,GAAG,IAAI,WAAA,CAAA,SAAJ,EAAZ;AACA,CAFQ,CAAT;AAIA,QAAQ,CAAC,gBAAD,EAAmB,YAAI;AAE9B,EAAA,EAAE,CAAC,sBAAD,EAAyB,YAAI;AAC9B,IAAA,SAAS,CAAC,IAAV,CAAe,QAAf,EAAyB,eAAzB,CAAyC,IAAI,MAAJ,EAAzC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,GAAV,CAAsB,QAAtB,CAAf;AACA,IAAA,MAAM,CAAC,MAAM,CAAC,QAAR,CAAN,CAAwB,OAAxB,CAAgC,QAAhC;AACA,GAJC,EAIC,KAJD,CAAF;AAMA,EAAA,EAAE,CAAC,6CAAD,EAAgD,YAAI;AACrD,IAAA,SAAS,CAAC,IAAV,CAAe,QAAf,EAAyB,cAAzB,CAAwC;AAAA,aAAI,IAAI,MAAJ,EAAJ;AAAA,KAAxC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,GAAV,CAAsB,QAAtB,CAAf;AACA,IAAA,MAAM,CAAC,MAAM,CAAC,QAAR,CAAN,CAAwB,OAAxB,CAAgC,QAAhC;AACA,GAJC,CAAF;AAKA,CAbO,CAAR;AAeA,QAAQ,CAAC,mBAAD,EAAsB,YAAI;AAEjC,EAAA,EAAE,CAAC,iCAAD,EAAoC,YAAI;AACzC,IAAA,SAAS,CAAC,IAAV,CAAe,MAAf,EAAuB,MAAvB;AACA,QAAM,KAAK,GAAG,SAAS,CAAC,OAAV,CAAkB,KAAlB,CAAd;AACA,IAAA,MAAM,CAAC,KAAK,CAAC,KAAN,EAAD,CAAN,CAAsB,OAAtB,CAA8B,MAA9B;AACA,GAJC,EAIC,KAJD,CAAF;AAMA,EAAA,EAAE,CAAC,gDAAD,EAAmD,YAAI;AACxD;AACA,IAAA,SAAS,CAAC,IAAV,CAAe,KAAf,EAAsB,MAAtB;;AACA,QAAM,MAAM,GAAG,SAAT,MAAS;AAAA,aAAI,SAAS,CAAC,GAAV,CAAc,KAAd,CAAJ;AAAA,KAAf;;AACA,IAAA,MAAM,CAAC,MAAD,CAAN,CAAe,OAAf,CAAuB,0DAAvB;AACA,GALC,CAAF;AAMA,CAdO,CAAR;;;;;;;;;;;;0BAvCM,M;0BASA,K;0BASF,S","sourcesContent":["import 'reflect-metadata'\nimport { injectable, Container } from 'inversify'\n\n\n@injectable()\nclass Katana {\n\tshapness = 'pupple'\n\n    public hit() {\n        return \"cut!\";\n    }\n}\n\n@injectable()\nclass Ninja implements Ninja {\n    public katana: Katana;\n    public constructor(katana: Katana) {\n        this.katana = katana;\n    }\n    public fight() { return this.katana.hit(); }\n}\n\n\nlet container = new Container();\n\nafterEach(()=>{\n\tcontainer = new Container()\t\n})\n\ndescribe('Inversify bind', ()=>{\n\n\tit('bind value with name', ()=>{\n\t\tcontainer.bind('Katana').toConstantValue(new Katana())\n\t\tconst katana = container.get<Katana>('Katana');\n\t\texpect(katana.shapness).toEqual('pupple');\n\t}, 10000)\n\n\tit('bind function which return value with name ', ()=>{\n\t\tcontainer.bind('Katana').toDynamicValue(()=>new Katana())\n\t\tconst katana = container.get<Katana>('Katana');\n\t\texpect(katana.shapness).toEqual('pupple');\n\t})\n})\n\ndescribe('Inversify resolve', ()=>{\n\n\tit('resolve root class without bind', ()=>{\n\t\tcontainer.bind(Katana).toSelf();\n\t\tconst ninja = container.resolve(Ninja);\n\t\texpect(ninja.fight()).toEqual(\"cut!\");\n\t}, 10000)\n\n\tit('fail to resolve sub dependencies automatically', ()=>{\n\t\t//Ninja has been registered, but need to bind Katana too.\n\t\tcontainer.bind(Ninja).toSelf()\n\t\tconst tryGet = ()=>container.get(Ninja);\n\t\texpect(tryGet).toThrow(\"No matching bindings found for serviceIdentifier: Katana\");\n\t})\n})\n\n"]}