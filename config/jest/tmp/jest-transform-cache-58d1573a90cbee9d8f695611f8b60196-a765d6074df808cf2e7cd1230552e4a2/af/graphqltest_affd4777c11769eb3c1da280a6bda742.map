{"version":3,"sources":["/home/broth59/Desktop/Projects/Node/Inversify/test/server/graphql.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,OAAA,CAAA,sBAAA,CAAA;;AACA,OAAA,CAAA,gBAAA,CAAA;;AAEA,IAAM,MAAM,GAAG,IAAI,QAAA,CAAA,YAAJ,CAAiB;AAC5B,EAAA,GAAG,EAAE,+BADuB;AAE5B,EAAA,KAAK,EAAE,IAAI,QAAA,CAAA,aAAJ;AAFqB,CAAjB,CAAf;AAKA,EAAE,CAAC,oBAAD;AAAA,qEAAuB,iBAAO,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACS,MAAM,CAAC,KAAP,CAAa;AACvC,cAAA,KAAK,EAAE,QAAA,CAAA,GAAF;AADkC,aAAb,CADT;;AAAA;AAAA;AACb,YAAA,IADa,uBACb,IADa;AACP,YAAA,KADO,uBACP,KADO;AAcrB,YAAA,MAAM,CAAC,IAAI,CAAC,KAAN,CAAN,CAAmB,UAAnB;AAEA,YAAA,IAAI;;AAhBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA,KAiBC,KAjBD,CAAF;AAmBA,EAAE,CAAC,sBAAD;AAAA,sEAAyB,kBAAO,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACO,MAAM,CAAC,KAAP,CAAa;AACvC,cAAA,KAAK,EAAE,QAAA,CAAA,GAAF,oBADkC;AAYvC,cAAA,SAAS,EAAE;AAAE,gBAAA,EAAE,EAAE;AAAN;AAZ4B,aAAb,CADP;;AAAA;AAAA;AACf,YAAA,IADe,wBACf,IADe;AACT,YAAA,KADS,wBACT,KADS;AAevB,YAAA,MAAM,CAAC,IAAD,CAAN,CAAa,UAAb;AAEA,YAAA,IAAI;;AAjBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA,KAkBC,KAlBD,CAAF;;;;;;;;;;0BAxBM,M","sourcesContent":["import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport 'cross-fetch/polyfill';\nimport 'babel-polyfill';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:3020/graphql',\n    cache: new InMemoryCache(),\n});\n\nit('Server return list', async (done) => {\n    const { data, error } = await client.query({\n        query: gql`\n            query list {\n                users {\n                    id\n                    email\n                    photo {\n                        image_path\n                    }\n                }\n            }\n        `,\n    });\n    expect(data.users).toBeTruthy();\n\n    done();\n}, 10000);\n\nit('Server return single', async (done) => {\n    const { data, error } = await client.query({\n        query: gql`\n            query single($id) {\n                user(id:$id){\n                    id\n                    email\n                    photo {\n                        image_path\n                    }\n                }\n            }\n\t\t`,\n        variables: { id: 'broth59' },\n    });\n    expect(data).toBeTruthy();\n\n    done();\n}, 10000);\n"]}