{"version":3,"sources":["/home/broth59/Desktop/Projects/Node/Inversify/test/server/inversify.test.ts"],"names":[],"mappings":"cAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import 'reflect-metadata';\n// import { injectable, Container } from 'inversify';\n\n// @injectable()\n// class Katana {\n//     shapness = 'pupple';\n\n//     public hit() {\n//         return 'cut!';\n//     }\n// }\n\n// @injectable()\n// class Ninja implements Ninja {\n//     public katana: Katana;\n//     public constructor(katana: Katana) {\n//         this.katana = katana;\n//     }\n//     public fight() {\n//         return this.katana.hit();\n//     }\n// }\n\n// let container = new Container();\n\n// afterEach(() => {\n//     container = new Container();\n// });\n\n// describe('Inversify bind', () => {\n//     it('bind value with name', () => {\n//         container.bind('Katana').toConstantValue(new Katana());\n//         const katana = container.get<Katana>('Katana');\n//         expect(katana.shapness).toEqual('pupple');\n//     }, 10000);\n\n//     it('bind function which return value with name ', () => {\n//         container.bind('DynamicKatana').toDynamicValue(() => new Katana());\n//         const katana = container.get<Katana>('DynamicKatana');\n//         expect(katana.shapness).toEqual('pupple');\n//     });\n// });\n\n// describe('Inversify resolve', () => {\n//     it('resolve root class without bind', () => {\n//         container.bind(Katana).toSelf();\n//         const ninja = container.resolve(Ninja);\n//         expect(ninja.fight()).toEqual('cut!');\n//     }, 10000);\n\n//     it('fail to resolve sub dependencies automatically', () => {\n//         //Ninja has been registered, but need to bind Katana too.\n//         container.bind(Ninja).toSelf();\n//         const tryGet = () => container.get(Ninja);\n//         expect(tryGet).toThrow(\n//             'No matching bindings found for serviceIdentifier: Katana'\n//         );\n//     });\n// });\n"]}