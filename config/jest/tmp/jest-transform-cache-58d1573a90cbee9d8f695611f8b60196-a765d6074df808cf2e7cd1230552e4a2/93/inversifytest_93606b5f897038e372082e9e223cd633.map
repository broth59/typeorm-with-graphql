{"version":3,"sources":["/home/broth59/Desktop/Projects/Node/Inversify/test/server/inversify.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGA,IAAM,MAAN;AAAA,oBAAA;AAAA;;AACI,SAAA,QAAA,GAAW,QAAX;AAKH;;AAND;AAAA;AAAA,0BAGc;AACN,aAAO,MAAP;AACH;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,GAAA;;AAAM,MAAM,GAAA,UAAA,CAAA,CADX,WAAA,CAAA,UAAA,EACW,CAAA,EAAN,MAAM,CAAN;;AASN,IAAM,KAAN;AAEI,iBAAmB,MAAnB,EAAiC;AAAA;;AAC7B,SAAK,MAAL,GAAc,MAAd;AACH;;AAJL;AAAA;AAAA,4BAKgB;AACR,aAAO,KAAK,MAAL,CAAY,GAAZ,EAAP;AACH;AAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,GAAA;;AAAM,KAAK,GAAA,UAAA,CAAA,CADV,WAAA,CAAA,UAAA,EACU,E,iCAEoB,M,EAFpB,CAAA,EAAL,KAAK,CAAL;AAUN,IAAI,SAAS,GAAG,IAAI,WAAA,CAAA,SAAJ,EAAhB;AAEA,SAAS,CAAC,YAAK;AACX,EAAA,SAAS,GAAG,IAAI,WAAA,CAAA,SAAJ,EAAZ;AACH,CAFQ,CAAT;AAIA,QAAQ,CAAC,gBAAD,EAAmB,YAAK;AAC5B,EAAA,EAAE,CAAC,sBAAD,EAAyB,YAAK;AAC5B,IAAA,SAAS,CAAC,IAAV,CAAe,QAAf,EAAyB,eAAzB,CAAyC,IAAI,MAAJ,EAAzC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,GAAV,CAAsB,QAAtB,CAAf;AACA,IAAA,MAAM,CAAC,MAAM,CAAC,QAAR,CAAN,CAAwB,OAAxB,CAAgC,QAAhC;AACH,GAJC,EAIC,KAJD,CAAF;AAMA,EAAA,EAAE,CAAC,6CAAD,EAAgD,YAAK;AACnD,IAAA,SAAS,CAAC,IAAV,CAAe,eAAf,EAAgC,cAAhC,CAA+C;AAAA,aAAM,IAAI,MAAJ,EAAN;AAAA,KAA/C;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,GAAV,CAAsB,eAAtB,CAAf;AACA,IAAA,MAAM,CAAC,MAAM,CAAC,QAAR,CAAN,CAAwB,OAAxB,CAAgC,QAAhC;AACH,GAJC,CAAF;AAKH,CAZO,CAAR;AAcA,QAAQ,CAAC,mBAAD,EAAsB,YAAK;AAC/B,EAAA,EAAE,CAAC,iCAAD,EAAoC,YAAK;AACvC,IAAA,SAAS,CAAC,IAAV,CAAe,MAAf,EAAuB,MAAvB;AACA,QAAM,KAAK,GAAG,SAAS,CAAC,OAAV,CAAkB,KAAlB,CAAd;AACA,IAAA,MAAM,CAAC,KAAK,CAAC,KAAN,EAAD,CAAN,CAAsB,OAAtB,CAA8B,MAA9B;AACH,GAJC,EAIC,KAJD,CAAF;AAMA,EAAA,EAAE,CAAC,gDAAD,EAAmD,YAAK;AACtD;AACA,IAAA,SAAS,CAAC,IAAV,CAAe,KAAf,EAAsB,MAAtB;;AACA,QAAM,MAAM,GAAG,SAAT,MAAS;AAAA,aAAM,SAAS,CAAC,GAAV,CAAc,KAAd,CAAN;AAAA,KAAf;;AACA,IAAA,MAAM,CAAC,MAAD,CAAN,CAAe,OAAf,CACI,0DADJ;AAGH,GAPC,CAAF;AAQH,CAfO,CAAR;;;;;;;;;;;;0BAvCM,M;0BASA,K;0BAUF,S","sourcesContent":["import 'reflect-metadata';\nimport { injectable, Container } from 'inversify';\n\n@injectable()\nclass Katana {\n    shapness = 'pupple';\n\n    public hit() {\n        return 'cut!';\n    }\n}\n\n@injectable()\nclass Ninja implements Ninja {\n    public katana: Katana;\n    public constructor(katana: Katana) {\n        this.katana = katana;\n    }\n    public fight() {\n        return this.katana.hit();\n    }\n}\n\nlet container = new Container();\n\nafterEach(() => {\n    container = new Container();\n});\n\ndescribe('Inversify bind', () => {\n    it('bind value with name', () => {\n        container.bind('Katana').toConstantValue(new Katana());\n        const katana = container.get<Katana>('Katana');\n        expect(katana.shapness).toEqual('pupple');\n    }, 10000);\n\n    it('bind function which return value with name ', () => {\n        container.bind('DynamicKatana').toDynamicValue(() => new Katana());\n        const katana = container.get<Katana>('DynamicKatana');\n        expect(katana.shapness).toEqual('pupple');\n    });\n});\n\ndescribe('Inversify resolve', () => {\n    it('resolve root class without bind', () => {\n        container.bind(Katana).toSelf();\n        const ninja = container.resolve(Ninja);\n        expect(ninja.fight()).toEqual('cut!');\n    }, 10000);\n\n    it('fail to resolve sub dependencies automatically', () => {\n        //Ninja has been registered, but need to bind Katana too.\n        container.bind(Ninja).toSelf();\n        const tryGet = () => container.get(Ninja);\n        expect(tryGet).toThrow(\n            'No matching bindings found for serviceIdentifier: Katana'\n        );\n    });\n});\n"]}