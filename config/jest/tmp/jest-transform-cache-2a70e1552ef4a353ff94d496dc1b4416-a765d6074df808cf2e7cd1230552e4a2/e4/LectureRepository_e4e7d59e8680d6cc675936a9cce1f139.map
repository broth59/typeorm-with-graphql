{"version":3,"sources":["/home/broth59/Desktop/Projects/React/JS-project-environment/src/server/graphql/resolver/LectureRepository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA,C,CACA;;;AACA,IAAA,qBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,uCAAA,CAAA,CAAA;;AAKA,IAAa,eAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+FAIS,GAJT,EAKa,EALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAOQ,gBAAA,UAPR,GAOqB,GAAG,CAAC,EAAJ,CAAO,aAAP,CAAqB,qBAAA,WAArB,CAPrB;AAAA,iDAQS,UAAU,CAAC,OAAX,CAAmB,EAAnB,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGAaS,GAbT;AAAA;AAAA;AAAA;AAAA;AAAA;AAeQ,gBAAA,UAfR,GAeqB,GAAG,CAAC,EAAJ,CAAO,aAAP,CAAqB,qBAAA,WAArB,CAfrB;AAAA,kDAgBS,UAAU,CAAC,IAAX,EAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,GAAA;;AAGI,UAAA,CAAA,CADF,cAAA,CAAA,KAAA,CAAM;AAAA,SAAM,qBAAA,WAAN;AAAA,CAAN,CACE,EACD,OAAA,CAAA,CAAA,EAAA,cAAA,CAAA,GAAA,EAAA,CADC,EAED,OAAA,CAAA,CAAA,EAAA,cAAA,CAAA,GAAA,CAAI,IAAJ,CAAA,CAFC,E,mCAAA,E,iDAAA,E,wCAAA,CAAA,E,yBAAA,E,UAAA,EAMF,IANE,CAAA;;AASA,UAAA,CAAA,CADF,cAAA,CAAA,KAAA,CAAM;AAAA,SAAM,CAAC,qBAAA,WAAD,CAAN;AAAA,CAAN,CACE,EACD,OAAA,CAAA,CAAA,EAAA,cAAA,CAAA,GAAA,EAAA,CADC,E,mCAAA,E,yCAAA,E,wCAAA,CAAA,E,yBAAA,E,WAAA,EAKF,IALE,CAAA;;AAZS,eAAe,GAAA,UAAA,CAAA,CAD3B,cAAA,CAAA,QAAA,EAC2B,CAAA,EAAf,eAAe,CAAf;AAAA,OAAA,CAAA,eAAA,GAAA,eAAA;AAqBb,OAAA,WAAA,GAAe,eAAf;;;;;;;;;;;;;;0BA1BA,qB;0BAKa,e","sourcesContent":["import {Resolver, Arg, Ctx, Query} from \"type-graphql\";\n// import bcrypt from \"bcryptjs\";\nimport LectureEntity from \"@interface/entity/LectureEntity\";\nimport LectureContentEntity from \"@interface/entity/LectureContentEntity\";\nimport ResolverContext from \"../type/ResolverContext\";\n\n@Resolver()\nexport class LectureResolver{\n\t\n\t@Query(() => LectureEntity)\n    async lecuture(\n\t\t@Ctx() ctx: ResolverContext, \n\t\t@Arg('id') id:string\n\t): Promise<LectureEntity | undefined> {\n\t\tconst repository = ctx.db.getRepository(LectureEntity)\n\t\treturn repository.findOne(id)\n\t}\n\n\t@Query(() => [LectureEntity])\n    async lecutures(\n\t\t@Ctx() ctx: ResolverContext\n\t): Promise<LectureEntity[] | undefined> {\n\t\tconst repository = ctx.db.getRepository(LectureEntity)\n\t\treturn repository.find()\n\t}\n\t\n}\n\nexport default LectureResolver"]}