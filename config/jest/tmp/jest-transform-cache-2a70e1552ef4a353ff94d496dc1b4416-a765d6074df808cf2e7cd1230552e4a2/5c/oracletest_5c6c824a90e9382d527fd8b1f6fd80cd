0ff043c059a86245c75d0e5b67f7931b
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n\t\t\t\tquery lecture($content_no) {\n\t\t\t\t\tcotent_no\n\t\t\t\t}\n\t\t\t"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal["default"].signature : function (a) {
  return a;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var client_1 = require("@apollo/client");

require("babel-polyfill");

require("cross-fetch/polyfill"); // beforeAll(async ()=>{
// })


describe('Oracle db connection', function () {
  it('connect', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(done) {
      var client;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              client = new client_1.ApolloClient({
                uri: 'http://localhost:3020/graphql',
                cache: new client_1.InMemoryCache()
              });
              _context.next = 3;
              return client.query({
                query: client_1.gql(_templateObject()),
                variables: {
                  content_no: 1
                }
              }).then(function (result) {
                return console.log(result);
              })["catch"](console.log);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), 20000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2Jyb3RoNTkvRGVza3RvcC9Qcm9qZWN0cy9SZWFjdC9KUy1wcm9qZWN0LWVudmlyb25tZW50L3Rlc3Qvc2VydmVyL29yYWNsZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUE7O0FBQ0EsT0FBQSxDQUFBLGdCQUFBLENBQUE7O0FBQ0EsT0FBQSxDQUFBLHNCQUFBLENBQUEsQyxDQUVBO0FBRUE7OztBQUdBLFFBQVEsQ0FBQyxzQkFBRCxFQUF5QixZQUFJO0FBRXBDLEVBQUEsRUFBRSxDQUFDLFNBQUQ7QUFBQSx1RUFBWSxpQkFBTyxJQUFQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNQLGNBQUEsTUFETyxHQUNFLElBQUksUUFBQSxDQUFBLFlBQUosQ0FBaUI7QUFDL0IsZ0JBQUEsR0FBRyxFQUFFLCtCQUQwQjtBQUUvQixnQkFBQSxLQUFLLEVBQUUsSUFBSSxRQUFBLENBQUEsYUFBSjtBQUZ3QixlQUFqQixDQURGO0FBQUE7QUFBQSxxQkFLUCxNQUFNLENBQ1gsS0FESyxDQUNDO0FBQ04sZ0JBQUEsS0FBSyxFQUFFLFFBQUEsQ0FBQSxHQUFGLG1CQURDO0FBT04sZ0JBQUEsU0FBUyxFQUFFO0FBQ1Ysa0JBQUEsVUFBVSxFQUFHO0FBREg7QUFQTCxlQURELEVBWUwsSUFaSyxDQVlBLFVBQUEsTUFBTTtBQUFBLHVCQUFJLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWixDQUFKO0FBQUEsZUFaTixXQWFDLE9BQU8sQ0FBQyxHQWJULENBTE87O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBWjs7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQXFCQyxLQXJCRCxDQUFGO0FBdUJBLENBekJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2Jvb3RzdHJhcFxuLy9tb2R1bGVcbmltcG9ydCB7IEFwb2xsb1NlcnZlciB9IGZyb20gJ0BhcG9sbG8vc2VydmVyJ1xuaW1wb3J0IHsgQXBvbGxvQ2xpZW50LCBJbk1lbW9yeUNhY2hlLCBncWwgfSBmcm9tICdAYXBvbGxvL2NsaWVudCdcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnXG5pbXBvcnQgJ2Nyb3NzLWZldGNoL3BvbHlmaWxsJ1xuXG4vLyBiZWZvcmVBbGwoYXN5bmMgKCk9Pntcblx0XG4vLyB9KVxuXG5cbmRlc2NyaWJlKCdPcmFjbGUgZGIgY29ubmVjdGlvbicsICgpPT57XG5cdFxuXHRpdCgnY29ubmVjdCcsIGFzeW5jIChkb25lKT0+e1xuXHRcdGNvbnN0IGNsaWVudCA9IG5ldyBBcG9sbG9DbGllbnQoe1xuXHRcdFx0dXJpOiAnaHR0cDovL2xvY2FsaG9zdDozMDIwL2dyYXBocWwnLFxuXHRcdFx0Y2FjaGU6IG5ldyBJbk1lbW9yeUNhY2hlKCksXG5cdFx0fSk7XHRcdFxuXHRcdGF3YWl0IGNsaWVudFxuXHRcdC5xdWVyeSh7XG5cdFx0XHRxdWVyeTogZ3FsYFxuXHRcdFx0XHRxdWVyeSBsZWN0dXJlKCRjb250ZW50X25vKSB7XG5cdFx0XHRcdFx0Y290ZW50X25vXG5cdFx0XHRcdH1cblx0XHRcdGBcblx0XHRcdCxcblx0XHRcdHZhcmlhYmxlczoge1xuXHRcdFx0XHRjb250ZW50X25vIDogMVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0LnRoZW4ocmVzdWx0ID0+IGNvbnNvbGUubG9nKHJlc3VsdCkpXG5cdFx0LmNhdGNoKGNvbnNvbGUubG9nKVxuXG4gXHRcblx0fSwgMjAwMDApXG5cbn0pIl19