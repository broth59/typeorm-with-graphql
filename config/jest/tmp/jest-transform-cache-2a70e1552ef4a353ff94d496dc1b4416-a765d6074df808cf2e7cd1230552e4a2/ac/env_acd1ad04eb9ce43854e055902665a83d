7f46c252ac718c90533911d24424283b
"use strict";

var _namespace;

(function () {
  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;
  enterModule && enterModule(module);
})();

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal["default"].signature : function (a) {
  return a;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restoreToRuntimeEnvironment = exports.Container = exports.ENVKEY = exports.Profile = void 0;

var typescript_ioc_1 = require("typescript-ioc");

Object.defineProperty(exports, "Container", {
  enumerable: true,
  get: function get() {
    return typescript_ioc_1.Container;
  }
});

var path_1 = __importDefault(require("path"));

require("colors");

var paths_1 = require("@config/paths");
/* Define enviroment Profiles */


var Profile;

(function (Profile) {
  Profile["DEVELOPMENT"] = "PROFILE.DEVELOPMENT";
  Profile["TEST"] = "PROFILE.TEST";
  Profile["PRODUCTION"] = "PROFILE.PRODUNCTION";
})(Profile = exports.Profile || (exports.Profile = {}));
/* Define environment keys */


var ENVKEY;

(function (ENVKEY) {
  var CLIENT;

  (function (CLIENT) {
    var WEBPACK;

    (function (WEBPACK) {
      //Environment 
      WEBPACK["SHOULD_BE_VERBOS"] = "@env/client/webpack/shoud_be_specific"; //Build

      WEBPACK["PATH_ALIAS"] = "@env/client/webpack/path_alias";
      WEBPACK["COMPILER_CONFIG"] = "@env/client/webpack/compiler_config";
      WEBPACK["CSS_PROCESSORS"] = "@env/client/webpack/css_processors";
      WEBPACK["HTML_PLUGINS"] = "@env/client/webpack/html_plugins"; //Watch

      WEBPACK["SERVER_CONFIG"] = "@env/client/webpack/server_config";
      WEBPACK["PORT"] = "@env/client/webpack/port";
      WEBPACK["HOST"] = "@env/client/webpack/host";
    })(WEBPACK = CLIENT.WEBPACK || (CLIENT.WEBPACK = {}));

    var STORE;

    (function (STORE) {
      STORE.ROOT = '@env/client/store/root';
    })(STORE = CLIENT.STORE || (CLIENT.STORE = {}));
  })(CLIENT = ENVKEY.CLIENT || (ENVKEY.CLIENT = {}));

  var SERVER;

  (function (SERVER) {
    SERVER.PORT = '@env/server/port';
    SERVER.HOST = '@env/server/host';
    SERVER.DOMAIN = '@env/server/domain';
    SERVER.PUBLIC_PATH = '@env/server/public_path';
    SERVER.DB_CONFIG = '@env/server/db_config';
    var EXPRESS;

    (function (EXPRESS) {
      EXPRESS.APP = '@env/server/express/app';
    })(EXPRESS = SERVER.EXPRESS || (SERVER.EXPRESS = {}));

    var WEBPACK;

    (function (WEBPACK) {
      WEBPACK.COMPILER_CONFIG = '@env/server/webpack/compiler_config';
    })(WEBPACK = SERVER.WEBPACK || (SERVER.WEBPACK = {}));
  })(SERVER = ENVKEY.SERVER || (ENVKEY.SERVER = {}));
})(ENVKEY = exports.ENVKEY || (exports.ENVKEY = {}));

var environment = {
  namespace: (_namespace = {}, _defineProperty(_namespace, Profile.DEVELOPMENT, [{
    bindName: ENVKEY.CLIENT.WEBPACK.SHOULD_BE_VERBOS,
    to: true
  }, {
    bindName: ENVKEY.CLIENT.WEBPACK.HOST,
    to: 'localhost'
  }, {
    bindName: ENVKEY.CLIENT.WEBPACK.PORT,
    to: 3010
  }, {
    bindName: ENVKEY.SERVER.HOST,
    to: 'localhost'
  }, {
    bindName: ENVKEY.SERVER.DOMAIN,
    to: 'http://localhost'
  }, {
    bindName: ENVKEY.SERVER.PORT,
    to: 3020
  }, {
    bindName: ENVKEY.SERVER.PUBLIC_PATH,
    to: '/'
  }, {
    bindName: ENVKEY.SERVER.DB_CONFIG,
    to: {
      type: 'oracle',
      host: '172.18.0.2',
      port: 1521,
      username: 'tester',
      password: '1234',
      database: 'xe',
      connectString: '(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(Host = 172.18.0.2)(Port = 1521)))(CONNECT_DATA =(sid = XE)(SERVER=dedicated)))',
      synchronize: true,
      logging: true,
      entities: ["".concat(path_1["default"].join(paths_1.Path["interface"], 'entity'), "/**/*.ts")]
    }
  }]), _defineProperty(_namespace, Profile.TEST, [{
    bindName: ENVKEY.CLIENT.WEBPACK.SHOULD_BE_VERBOS,
    to: false
  }, {
    bindName: ENVKEY.CLIENT.WEBPACK.HOST,
    to: 'localhost'
  }, {
    bindName: ENVKEY.CLIENT.WEBPACK.PORT,
    to: 3010
  }, {
    bindName: ENVKEY.SERVER.HOST,
    to: 'localhost'
  }, {
    bindName: ENVKEY.SERVER.DOMAIN,
    to: 'http://localhost'
  }, {
    bindName: ENVKEY.SERVER.PORT,
    to: 3020
  }, {
    bindName: ENVKEY.SERVER.PUBLIC_PATH,
    to: '/'
  }, {
    bindName: ENVKEY.SERVER.DB_CONFIG,
    to: {
      type: 'oracle',
      host: 'localhost',
      port: 3030,
      username: 'TESTER',
      password: '',
      database: 'arena',
      synchronize: true,
      logging: true,
      entities: ["".concat(path_1["default"].join(paths_1.Path["interface"], 'entity'), "/**/*.ts")]
    }
  }]), _defineProperty(_namespace, Profile.PRODUCTION, [{
    bindName: ENVKEY.CLIENT.WEBPACK.SHOULD_BE_VERBOS,
    to: false
  }, {
    bindName: ENVKEY.CLIENT.WEBPACK.HOST,
    to: 'localhost'
  }, {
    bindName: ENVKEY.CLIENT.WEBPACK.PORT,
    to: 3010
  }, {
    bindName: ENVKEY.SERVER.HOST,
    to: '127.0.0.0'
  }, {
    bindName: ENVKEY.SERVER.DOMAIN,
    to: 'http://localhost'
  }, {
    bindName: ENVKEY.SERVER.PORT,
    to: 3020
  }, {
    bindName: ENVKEY.SERVER.PUBLIC_PATH,
    to: '/static/'
  }, {
    bindName: ENVKEY.SERVER.DB_CONFIG,
    to: {
      type: 'oracle',
      host: 'localhost',
      port: 3030,
      username: 'TESTER',
      password: 'PASSWORD',
      database: 'xe',
      synchronize: true,
      logging: true,
      entities: ["".concat(path_1["default"].join(paths_1.Path["interface"], 'entity'), "/**/*.ts")]
    }
  }]), _namespace)
};
typescript_ioc_1.Container.configure(environment);

var _resolveRunTimeEnviro = resolveRunTimeEnvironment(),
    _resolveRunTimeEnviro2 = _slicedToArray(_resolveRunTimeEnviro, 2),
    profile = _resolveRunTimeEnviro2[0],
    color = _resolveRunTimeEnviro2[1];

typescript_ioc_1.Container.environment(profile);
console.log("".concat("Node Environment is now".cyan, " ").concat(profile[color]));

function resolveRunTimeEnvironment() {
  var node_environment = process.env.NODE_ENV;
  var profile;
  var color;

  switch (node_environment) {
    case 'DEVELOPMENT':
      profile = Profile.DEVELOPMENT;
      color = 'green';
      break;

    case 'TEST':
      profile = Profile.TEST;
      color = 'cyan';
      break;

    case 'PRODUCTION':
      profile = Profile.PRODUCTION;
      color = 'red';
      break;

    default:
      profile = Profile.DEVELOPMENT;
      color = 'green';
  }

  return [profile, color];
}

function restoreToRuntimeEnvironment() {
  typescript_ioc_1.Container.environment(profile);
}

exports.restoreToRuntimeEnvironment = restoreToRuntimeEnvironment;
;

(function () {
  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(__importDefault, "__importDefault", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(path_1, "path_1", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(Profile, "Profile", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(ENVKEY, "ENVKEY", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(environment, "environment", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(profile, "profile", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(color, "color", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(resolveRunTimeEnvironment, "resolveRunTimeEnvironment", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
  reactHotLoader.register(restoreToRuntimeEnvironment, "restoreToRuntimeEnvironment", "/home/broth59/Desktop/Projects/React/JS-project-environment/config/env.ts");
})();

;

(function () {
  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;
  leaveModule && leaveModule(module);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,