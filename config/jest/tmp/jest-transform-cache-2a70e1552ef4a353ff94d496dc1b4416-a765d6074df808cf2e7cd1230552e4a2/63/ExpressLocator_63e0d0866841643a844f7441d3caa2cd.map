{"version":3,"sources":["/home/broth59/Desktop/Projects/React/JS-project-environment/src/server/bootstrap/ExpressLocator.ts"],"names":[],"mappings":"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","sourcesContent":["import { Container, ENVKEY, Profile } from '@config/env'\nimport express from 'express'\nimport morgan from 'morgan'\nimport cors from 'cors'\nimport cookieParser from 'cookie-parser'\nimport passport from 'passport'\nimport { buildSchema } from \"type-graphql\";\nimport { createConnection, getConnectionManager, getConnection, EntityTarget } from \"typeorm\";\nimport { getConnectionOptions, Repository } from \"typeorm\";\nimport session from \"express-session\";\nimport { ApolloServer } from 'apollo-server-express'\n\nimport hpp from 'hpp'\nimport helmet from 'helmet'\nimport ResolverContext from '@server/graphql/type/ResolverContext'\n\nimport { Path } from '@config/paths'\nimport { LectureResolver } from '@server/graphql/resolver/LectureResolver'\n\nconst HOST = Container.getValue(ENVKEY.SERVER.HOST)\nconst DB_CONFIG = Container.getValue(ENVKEY.SERVER.DB_CONFIG)\n\nContainer.environment(Profile.DEVELOPMENT)\nContainer\n\t.bindName(ENVKEY.SERVER.EXPRESS.APP)\n\t.to(async ()=>{\n\t\tconst app = express()\n\t\tapp.use(hpp())\n\t\tapp.use(helmet())\n\t\tapp.use(morgan('combined'))\n\t\tapp.use(cors({\n\t\t\torigin: new RegExp(HOST),\n\t\t\tcredentials: true,\n\t\t}))\n\n\n\t\tconst db_connection = await createConnection(DB_CONFIG)\n\t\tconst schema = await buildSchema({\n\t\t  \tresolvers: [\n\t\t\t\tLectureResolver \n\t\t\t\t//Path.server + \"graphql/resolver/**/*.ts\"\n\t\t\t],\n\t\t})\n\t\tconst apollo_server = new ApolloServer({\n\t\t  \tschema ,\n\t\t  \tcontext: ({ req, res }: any) => {\n\t\t\t\tconst repository_cache = {} as { [index:string]: Repository<any> }\n\n\t\t\t\treturn { \n\t\t\t\t\treq, res,\n\t\t\t\t\tdb: {\n\t\t\t\t\t\tmanager: db_connection.manager,\n\t\t\t\t\t\tgetRepository(entity:any):Repository<any>{\n\t\t\t\t\t\t\tif(!repository_cache[entity]){\n\t\t\t\t\t\t\t\trepository_cache[entity] = db_connection.manager.getRepository(entity)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn repository_cache[entity]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t} as ResolverContext\n\t\t  \t},\n\t\t} as any);\n\n\t\tapollo_server.applyMiddleware({ app });\n\n\t\treturn [app, apollo_server]\n\t})\n\n\nContainer.environment(Profile.PRODUCTION)\nContainer\n\t.bindName(ENVKEY.SERVER.EXPRESS.APP)\n\t.to(async ()=>{\n\t\tconst app = express()\n\t\t\n\t\tapp.use(hpp())\n\t\tapp.use(helmet())\n\t\tapp.use(morgan('combined'))\n\t\tapp.use(cors({\n\t\t\torigin: new RegExp(HOST),\n\t\t\tcredentials: true,\n\t\t}))\n\n\t\treturn app\n\t})"]}